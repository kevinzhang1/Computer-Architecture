Name: Kevin Zhang
Email Address: Kevin_Zhang@student.uml.edu

The program works by typing "make" in order to activate the makefile. The program reads from a text file called input.txt and puts the outputs into output.txt. Use the run executable if you want to input your own test numbers.

Overall, I feel that my degree of success with this project is a 100% completion. This is because I finished the assignment completely with the code completely working while making sure that I use the sample code that Professor Moloney gave me to do the assignment. I first approached the project by carefully reading the instructions and assignment guidelines and studying the sample code that the professor gave to us. The first time I read it, it was all confusing at first but eventually after re-reading it multiple times I finally understood what my goal was. 

In this assignment, I am required to scan floating-point numbers for my keyboard to a 32-bit memory location and print out the output in a certain format as described in the assignment. First, the program is supposed to prompt the user to enter in input number as a floating-point value by printing out the following prompt: "please enter a floating-point number and new-line: " Once the user has entered the input, the program is going to print out "the floating value for INPUT_NUMBER is broken out as: " and below it's going to list the mantissa, the exponent(both in hexadecimal), the sign bit, and the input in base ten form along with all of its binary forms. After that, the program goes back to the beginning will it prompts the user to enter a floating-point number again and the cycle just keeps repeating as long as the user continues to enter valid inputs.

After I read and fully understood the instructions, it was time to proceed with developing the program. The hardest and most difficult step of doing this project is figuring out how to get started. However, it didn't take long for me to realize that I need to do this project step by step. The first step was to write out the print statements for my C program. While writing to print statements are needed to make sure that the print outputs always aligned correctly with each other. Next, I needed to figure out what part of the float_32 each printf needs to print out in order to match the requirements of the assignment. It took some time for me to analyze the union float_32 and quite some testing in order for me to finally get the program to do exactly what it's supposed to do. I had to find the mantissa, exponent, sign bit, and binary form by hand for each of the input numbers and then compare my answers to the output answers in order to verify that the program produces the right output. Along the way, I ran into a lot of syntax errors that I accidentally left behind because I was too distracted by other things like there was one time when I accidentally forgot to put a comma after a C statement. However, eventually, I got the program to produce the right output with no errors. The program should be completely working with no errors.